# -*- coding: utf-8 -*-
"""Heart Disease Prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LMQGePMAV0HfPD7m1pcJu4AqnRsAdo_C
"""

import gradio as gr
import pickle
import numpy as np
import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import accuracy_score
import xgboost as xgb

# Function to load dataset and encode categorical variables
def load_data():
    if not os.path.exists("Heart_dataset.csv"):
        raise FileNotFoundError("Error: Heart_dataset.csv not found! Please upload it.")

    df = pd.read_csv("Heart_dataset.csv")

    # Encoding categorical features
    df["Sex"] = df["Sex"].map({"M": 1, "F": 0})
    df["ExerciseAngina"] = df["ExerciseAngina"].map({"Y": 1, "N": 0})
    df["ChestPainType"] = df["ChestPainType"].map({"ASY": 3, "ATA": 2, "NAP": 1, "TA": 0})
    df["RestingECG"] = df["RestingECG"].map({"Normal": 1, "ST": 2, "LVH": 0})
    df["ST_Slope"] = df["ST_Slope"].map({"Up": 2, "Flat": 1, "Down": 0})

    return df

data = load_data()

# Function to load trained model
def load_model():
    if not os.path.exists("model.pkl"):
        return None, None
    with open("model.pkl", "rb") as f:
        model, scaler = pickle.load(f)
    return model, scaler

# Train Model Function
def train_model():
    X = data.drop(columns=["HeartDisease"])
    y = data["HeartDisease"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    xgb_model = xgb.XGBClassifier()
    xgb_model.fit(X_train, y_train)

    y_pred_xgb = xgb_model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred_xgb)

    with open("model.pkl", "wb") as f:
        pickle.dump((xgb_model, scaler), f)

    return f"Model trained with Accuracy: {accuracy:.2%}"

# Prediction Function
def predict_heart_disease(*args):
    model, scaler = load_model()
    if model is None or scaler is None:
        return "Error: Model not trained yet. Please train the model first."

    input_data = np.array(args).reshape(1, -1)
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)

    return "Heart Disease" if prediction[0] == 1 else "No Heart Disease"

# Creating Gradio UI
def main():
    feature_names = list(data.drop(columns=["HeartDisease"]).columns)

    with gr.Blocks() as interface:
        gr.Markdown("# Heart Disease Prediction")

        with gr.Row():
            train_button = gr.Button("Train Model")
            train_output = gr.Textbox(label="Training Status")
            train_button.click(fn=train_model, inputs=[], outputs=train_output)

        gr.Markdown("### Enter Patient Data")
        inputs = [gr.Number(label=col, value=float(data[col].mean())) for col in feature_names]
        predict_button = gr.Button("Predict")
        output = gr.Textbox(label="Prediction")
        predict_button.click(fn=predict_heart_disease, inputs=inputs, outputs=output)

    interface.launch(share=True)

if __name__ == "__main__":
    main()